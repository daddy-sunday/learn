
raft 写
leader 写流程
	1。请求数据被leader 收到
	2.消息写入 存储log队列，发送消息队列，应用log队列（不提交的log不会被应用）
	3.等待保存log结果
	4.响应客户端消息

follower 收到leader流程：
	1.raft消息验证
	2.验证通过 保存消息到 存储log队列
	3.成功  将消息写入 应用队列，并响应客户端消息

三个异步线程：
	存储log线程，发送消息线程，应用log线程。
异步线程优点：都是批量操作，可以提升写入速度。


raft leader漂移
	leader 停止对外提供的写服务，可以正常读取数据。
	leader 检查 longIndex  等于 appliedIndex 等于 继位leader appliedIndex
	leader 退位，并通知继位leader 上位

未实现的功能：
使用rocksDB的snapshaot能力，实现添加节点或故障转移时快速恢复log entires的功能，还可以实现定期清理日志条目（只保留最近的或者小于多少的long entries），减少存储空间的占用。
  实现逻辑：
    leader 通过rockDB 提供的快照功能，获取rockDB快照。
    leader 通过快照读获取当前所有应用数据和appliedIndexId，并通过rockDB提供的writeSstFile能力将数据保存为sst文件。
    将sst文件发送到需要恢复数据的节点，完成后，在同步当前快照对应的log数据。
    这里不对sst文件进行存储。没有必要。只是借助快照的能力

raft 配置变更
	定义配置变更类型，
	当addRequest的数据类型为配置变更类型时，应用log中的成员信息到配置中

	流程：
	  发送新的配置变更消息给leader ，leader 将消息转化为 共识消息（新配置加老配置）（并立即应用共识配置）。然后将这条信息封装成log entries 走raft流程。
	  等待新添加节点日志追赶上来（新添加节点不参加选举也不算大多数)，然后leader 将新配置封装成 log entries 走一遍raft流程。当被应用时
	  判断自己还在不在成员列表中，如果不在就转变为等待退出状态。leader也转变为空闲状态

  支持的成员变更类型：
	  减少成员
	  添加成员
	  支持选择添加成员类型。（学习者或者是跟随者，并支持这两种类型之间相互切换）
